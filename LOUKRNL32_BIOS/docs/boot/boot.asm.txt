================================================================================================

				Tyler Grenier 10/19/23 6:19
				File Of Subject: Boot.asm
				Location of File: Boot/boot.asm

================================================================================================

	In Boot.asm we define a header known as a Multiboot header with is standard for the executable type that Grub Our Bootloader Uses For Our System. Typically in a Multiboot system you have a header with a magic number that is a 32 bit data Type in Multiboot 1 as we have here our Multiboot Headers Magic Number is 0x1BADB002 hex. The next 32 bit data type that we need to define Is Our Flags in our case we don't have any so we define 0x00 hex. The final this for our header is to make a third 32 bit data type with is our checksum which is our magic number plus our Flags.
	Now yes a lot of this File is Spegeti code but it kind of has to be because of the way the compiler works some code could technically be changed in this file however it wouldn't be recommended because again the compiler is still a bit glitchy for this file but without further ado lets get into the code first we declare a global entry for this and its called start this is where the kernel starts executing its first lines of code. Right now we are in assembly with is basically translated machine code that can be read by a basic human being... we also define an external function that is a c function that we will touch on at the end the first thing we do in our start function is store a pointer to a structure called the Multiboot info structure. We store it in a variable we define before our functions are defined. Then we move into our 32 bit stack pointer esp the pointer to the stack we defined in our .bss section. Then we call the check cpuid function in our code, to learn more about cupid after this please refer to the cpuid function in this folder.now if cpuid does not exist then there is not point continuing because all 64 bit processors have cpuid so we hit the machine from executing any further, but if cpuid exists there is a chance that long mode also exists but just in case we call long mode to make sure it exists. And once again if Long Mode Dosn't Exist halt the system and then display an error message. If you want to learn more about Long Mode please Read The LongMode file in this folder to review what long mode is and how it works... after that we set up Page tables that are necessary to For Long Mode To Run And then we enable Paging, to learn more about paging Please read The paging Documentation in this folder. Then we load the gdt... I'm going to briefly touch on this if you would like to know more about the gdt once again please read the documentation from this folder... then after all is said and done we do a far jump to the kernel code segment in the get and are now in long mode. Last we move the pointer to the Multiboot structure into rdi which is a 64 bit register that is used to pass registers to c functions and we call our function Lou_Kernel_Start... to continue with the project please go to the file in init/Lou_main.c.txt
	