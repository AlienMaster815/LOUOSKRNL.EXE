================================================================================================

                                  Tyler Grenier 10/20/23 11:47 AM
                          Subject of File: Global Descriptor Table AKA Gdt
                                  Location Of File: boot/boot.asm
  ================================================================================================

	What is the GDT? The Gdt is a table that consist of various entries related to the memory
    layout of the pc our kernel is running on. The kernel usually sets the gdt before the
    switch to long mode, more info on long mode will be in the long mode document in this folder.
    The gdt is important in all x86 & x86-64 systems because it defines certain areas of memory
    for different things in our operating system it segregates things like privileged
    or kernel code and User Mode/User Land code Which doesn't have permission except for what
    our kernel has given it, thus we will need to adapt our gdt several times for this to work
    correctly so this first gdt will not be our gdt for very long nor should the gdt in this file
    ever be used in a real situation this gdt is just basically put up to do very basic tasks
    needed to set up 64 bit long mode and tho get the kernel to re adjust everything
    for better and more efficient use, In 64 bit mode However We dont modify this beause we dont
    actually use the gdt we use paging instead. A gdt is basically just a table of information
    that is pointed to meaning told where it is by the gdt register and usually loaded into the
    register with the "lgdt" assembly syntax because again this is an actually central processing
    unit register and in order to directly manipulate registers you need to tell the central
    processing unit directly with machine code and being assembly is a translated machine code
    to human readable format assembly it is wether we do it in a c function or an asm function
    typically in the context of sanity the least advanced language to write a Operating system
    is C with the very basic must have assembly required to boot and manipulate registers. However
    in this project I use a bunch of languages including nasm assembly Clang C gnu C with are
    completely different in terms of how code is translated to machine code and if you try and
    tell me its not you can fuck off because I know for a fact its different, and I use GNU C++
    I might pull more into this but not right now.
